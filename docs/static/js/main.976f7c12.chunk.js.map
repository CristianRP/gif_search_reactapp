{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","query","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","setTimeout","then","useFetchGifs","image","GiftExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACE,uBAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKhB,UACE,8CAEA,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAnBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,c,QCPdG,EAAc,SAAC,GAAqB,EAApBC,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IACtC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCLGK,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,4DACN,mCACTC,EAAQC,UAAUH,GAClBL,EAHe,uDACN,mCADM,cAGmDO,EAHnD,sBAIEE,MAAMT,GAJR,cAIfU,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLjB,GAAIiB,EAAIjB,GACRC,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAXjB,kBAeda,GAfc,4CAAH,sDCMPK,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC4B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WACRC,YAAW,WACTnB,EAAQC,GACLmB,MAAK,SAAAR,GACJK,EAAS,CACPT,KAAMI,EACNG,SAAS,SAGd,OACF,CAAEd,IAEEe,EDZ0BK,CAAapB,GAAjCW,EAH0B,EAG/BJ,KAAaO,EAHkB,EAGlBA,QASrB,OACE,qCACE,oBAAIlB,UAAU,oCAAd,SAAmDI,IACjDc,GAAW,mBAAGlB,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SACE,6BAEIe,EAAOF,KAAI,SAACY,GAAD,OACT,cAAC,EAAD,eAAgCA,GAAdA,EAAM5B,eEUvB6B,EAhCO,WAAM,MAIU3C,mBAAS,CAAC,eAJpB,mBAInBQ,EAJmB,KAIPT,EAJO,KAY1B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEIS,EAAWsB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,YCfJuB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.976f7c12.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if ( inputValue.trim().length > 2 ) {\n      setCategories(categories => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Add Category</h2>\n      {/* <h2>{inputValue}</h2> */}\n      <input\n        type='text'\n        value={inputValue}\n        onChange={handleInputChange} />\n\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","\nexport const GifGridItem = ({id, title, url}) => {\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title}></img>\n      <p>{title}</p>\n    </div>\n  )\n}\n","export const getGifs = async (category) => {\n  const apiKey = 'mZGJwiJYGuUUdHZWJgFj0Cplhay1Egno';\n  const query = encodeURI(category);\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${query}&limit=10`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  });\n\n  return gifs;\n}\n","// import { useState, useEffect } from \"react\";\n// import { getGifs } from \"../helpers/getGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\n\nexport const GifGrid = ({ category }) => {\n\n  // const [images, setImages] = useState([]);\n  const { data:images, loading } = useFetchGifs(category);\n  // console.log(data);\n\n  // useEffect(() => {\n  //   getGifs(category)\n  //     .then(setImages);\n  // }, [ category ]);\n\n\n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n      { loading && <p className='animate__animated animate__flash'>Loading</p> }\n      <div className='card-grid'>\n        <ol>\n          {\n            images.map((image) =>\n              <GifGridItem key={image.id} {...image} />\n            )\n          }\n        </ol>\n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    setTimeout(() => {\n      getGifs(category)\n        .then(images => {\n          setState({\n            data: images,\n            loading: false,\n          })\n        });\n    }, 3000);\n  }, [ category ]);\n\n  return state;\n}","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GiftExpertApp = () => {\n\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n  // const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball']);\n  const [categories, setCategories] = useState(['Sponge Bob']);\n\n  // const handleAdd = () => {\n  //   // const input = document.querySelector('#cat');\n  //   // console.log(input);\n  //   setCategories([...categories, `Patito ${categories.length}`]);\n  // }\n\n  return(\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories}/>\n      <hr/>\n      {/* <input id='cat' type='text'></input> */}\n      {/* <button onClick={handleAdd}>Add</button> */}\n      <ol>\n        {\n          categories.map(category =>\n            <GifGrid\n              key={category}\n              category={category} />\n          )\n        }\n      </ol>\n    </>\n  );\n}\n\nexport default GiftExpertApp;\n\n// command snnipet rafc","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './GiftExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}